# -*- coding: utf-8 -*-
"""task1.ipynb

Original file is located at
    https://colab.research.google.com/drive/1GPew-uuo0GMPTk3ooHmKHUR4_B9rMfL4

#task 1 :Create a scatter plot to visualize the relationship between revenue and the number of installs for paid apps only. Add a trendline to show the correlation and color-code the points based on app categories.
"""

#importing the important libraries
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.io as pio
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk
import webbrowser
import os
playstore_df=pd.read_csv('/content/drive/MyDrive/Play Store Data.csv')
playstore_df

reviews_df=pd.read_csv("/content/drive/MyDrive/User Reviews (1).csv")
reviews_df

#check for null values in the columns according to task 1 as mentioned that is no of installs and type and app categories
playstore_df.isnull().sum()

#handling the null values and duplicated values
for column in playstore_df.columns :
    playstore_df[column].fillna(playstore_df[column].mode()[0],inplace=True)
playstore_df.drop_duplicates(inplace=True)
playstore_df=playstore_df[playstore_df['Rating']<=5]

playstore_df.isnull().sum()

#check for duplicate values if present in the data as it can hinder the visualization as wll as analysis
playstore_df.duplicated().sum()

#checking for the datatype of the columns
playstore_df.dtypes

#Convert the Installs columns to numeric by removing commas and +
playstore_df['Installs']=playstore_df['Installs'].str.replace(',','').str.replace('+','').astype(int)

#Convert Price column to numeric after removing $
playstore_df['Price']=playstore_df['Price'].str.replace('$','').astype(float)

#applying filter only for the paid apps only
paid_apps = playstore_df[playstore_df['Type'] == 'Paid']
paid_apps

playstore_df.dtypes

#creating a Revenue column from the installs and price column for paid apps only
paid_apps['Revenue']=paid_apps['Price']*paid_apps['Installs']

paid_apps

#saving the plot as html file
html_files_path="./"
if not os.path.exists(html_files_path):
    os.makedirs(html_files_path)
plot_containers=""
# Save each Plotly figure to an HTML file
def save_plot_as_html(fig, filename, insight):
    global plot_containers
    filepath = os.path.join(html_files_path, filename)
    html_content = pio.to_html(fig, full_html=False, include_plotlyjs='inline')
    # Append the plot and its insight to plot_containers
    plot_containers += f"""
    <div class="plot-container" id="{filename}" onclick="openPlot('{filename}')">
        <div class="plot">{html_content}</div>
        <div class="insights">{insight}</div>
    </div>
    """
    fig.write_html(filepath, full_html=False, include_plotlyjs='inline')

#ploting the figure
fig9=px.scatter(
    paid_apps,
    x='Installs',
    y='Revenue',
    color='Category',
    title='relationship between revenue and the number of installs for paid apps only',
    trendline='ols',
    color_discrete_sequence=px.colors.qualitative.Vivid,
    width=1200,
    height=600
)
fig9.update_layout(
    plot_bgcolor='black',
    paper_bgcolor='black',
    font_color='white',
    title_font={'size':16},
    xaxis=dict(title_font={'size':12}),
    yaxis=dict(title_font={'size':12}),
    margin=dict(l=10,r=10,t=30,b=10)
)
#fig1.update_traces(marker=dict(pattern=dict(line=dict(color='white',width=1))))
save_plot_as_html(fig9,"Update Graph .html","The Scatter Plot shows that the amount of revenue generated by various categories of apps on the basis of no.of installs.")
fig9.show()